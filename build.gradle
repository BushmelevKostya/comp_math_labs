plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'app'
version = '1.0.2'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

apply from: 'settings.gradle'

task createManifest(type: Jar) {
    dependsOn jar
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Project-version': version
        )
    }
    destinationDirectory = file("$dirBuild/meta")
    archiveFileName = 'MANIFEST.MF'
}

task createDirectories {
    doLast {
        mkdir("$dirBuild/classes")
        mkdir("$dirBuild/war-content")
        mkdir("$dirBuild/meta")
        mkdir("$dirBuild/docs")
    }
}

compileJava {
    dependsOn createDirectories
    destinationDirectory = file("$dirBuild/classes")
    source = file("src/main/java")
    options.encoding = 'UTF-8'
}

task copyResources(type: Copy) {
    from 'src/main/resources'
    into "$dirBuild/classes"
}

task buildJar(type: Jar) {
    dependsOn compileJava, copyResources
    from "$dirBuild/classes"
    archiveFileName = 'app.jar'
    destinationDirectory = file("$dirBuild")
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Project-version': version
        )
    }
}

task buildWar(type: War) {
    dependsOn buildJar
    from "$dirBuild/war-content"
    webInf.from 'src/main/webapp/WEB-INF'
    from fileTree('src/main/webapp')
    from fileTree("$dirBuild/classes")
    from configurations.runtimeClasspath
    from buildJar
    archiveFileName = 'app.war'
    destinationDirectory = file("$dirBuild")
}

task buildDoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.runtimeClasspath
    destinationDir = file("$dirBuild/docs/javadoc")
}

task myClean(type: Delete) {
    delete "$dirBuild"
}

tasks.register('scp', Exec) {
    dependsOn build
    description = 'Transfer the built project via SCP to a selected server'
    commandLine 'scp', "$dirBuild/app.war", 's367950@se.ifmo.ru:s367950/lab3'
}

bootJar {
    mainClass = 'Lab2Application'
}

task buildAndTest(dependsOn: ['build', 'test']) {
    group = 'verification'
    description = 'Builds and runs all tests'
}

task getLatestRevisions(type: Exec) {
    commandLine 'git', 'stash', 'push', '--', 'src/main/java'
    commandLine 'git', 'checkout', 'HEAD~1', '--', 'src/main/java'
    task('buildJar1', type: Jar) {
        dependsOn compileJava
        archiveFileName = 'app-HEAD1.jar'
        destinationDirectory = file("$dirBuild")
    }
    commandLine 'git', 'checkout', 'HEAD~2', '--', 'src/main/java'
    task('buildJar2', type: Jar) {
        dependsOn compileJava
        archiveFileName = 'app-HEAD2.jar'
        destinationDirectory = file("$dirBuild")
    }
    commandLine 'git', 'checkout', 'HEAD', '--', 'src/main/java'
    commandLine 'git', 'stash', 'pop'
    doLast {
        task revisionArchive(type: Zip) {
            from("$dirBuild") {
                include 'app-HEAD1.jar', 'app-HEAD2.jar'
            }
            archiveFileName = 'revisions.zip'
            destinationDirectory = file("$dirBuild")
        }
        doLast {
            revisionArchive.execute()
        }
    }
}

task alt {
    dependsOn build
    doLast {
        fileTree("$dirBuild/classes").include("**/*.class").each { file ->
            def content = file.text
            content = content.replaceAll("url", "RESTTEMPLATE")
            content = content.replaceAll("SubmitRequest", "SR")
            file.write(content)
        }

        jar {
            from "$dirBuild/classes"
            archiveFileName = 'alt-program.jar'
            destinationDirectory = file("$dirBuild/libs")
        }
    }
}