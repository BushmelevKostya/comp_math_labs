plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'app'
version = '1.0.2'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

apply from: 'settings.gradle'

task createManifest(type: Jar) {
    dependsOn jar
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Project-version': version
        )
    }
    destinationDirectory = file("$dirBuild/meta")
    archiveFileName = 'MANIFEST.MF'
}

task createDirectories {
    doLast {
        mkdir("$dirBuild/classes")
        mkdir("$dirBuild/war-content")
        mkdir("$dirBuild/meta")
        mkdir("$dirBuild/docs")
    }
}

compileJava {
    dependsOn createDirectories
    destinationDirectory = file("$dirBuild/classes")
    source = file("src/main/java")
    options.encoding = 'UTF-8'
}

task copyResources(type: Copy) {
    from 'src/main/resources'
    into "$dirBuild/classes"
}

task alt(type: Copy) {
    from 'src/main/java'
    into 'build/modifiedSrc'

    def replaceRules = file('replace.rules').readLines().collectEntries { line ->
        def parts = line.split('=')
        [(parts[0].trim()): parts[1].trim()]
    }

    include '**/*.java'

    filter { String line ->
        replaceRules.each { key, value ->
            line = line.replaceAll(key, value)
        }
        return line
    }
}

task compileModifiedJava(type: JavaCompile) {
    source = fileTree('build/modifiedSrc') {
        include '**/*.java'
    }
    classpath = sourceSets.main.compileClasspath
    destinationDir = file('build/classes/modified')
    dependsOn alt
}

task createModifiedJar(type: Jar) {
    from compileModifiedJava.destinationDir
    archiveBaseName.set('modified')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('')
    dependsOn compileModifiedJava
}

task buildJar(type: Jar) {
    dependsOn compileJava, copyResources, createModifiedJar
    from "$dirBuild/classes"
    archiveFileName = 'app.jar'
    destinationDirectory = file("$dirBuild")
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Project-version': version
        )
    }
}

task buildWar(type: War) {
    dependsOn buildJar
    from "$dirBuild/war-content"
    webInf.from 'src/main/webapp/WEB-INF'
    from fileTree('src/main/webapp')
    from fileTree("$dirBuild/classes")
    from configurations.runtimeClasspath
    from buildJar
    archiveFileName = 'app.war'
    destinationDirectory = file("$dirBuild")
}

task buildDoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.runtimeClasspath
    destinationDir = file("$dirBuild/docs/javadoc")
}

task myClean(type: Delete) {
    delete "$dirBuild"
}


tasks.register('scp', Exec) {
    dependsOn build
    commandLine 'ssh', '-p', '2222', '-L', '5433:localhost:5432', 's367950@se.ifmo.ru', '&&', 'scp', '-P', '2222', '-o', 'StrictHostKeyChecking=no', "$dirBuild/app.war", 'localhost:5433:s367950/lab3'
}


bootJar {
    mainClass = 'Lab2Application'
}

task buildAndTest(dependsOn: ['build', 'test']) {
    group = 'verification'
    description = 'Builds and runs all tests'
}

task getLatestRevisions(type: Exec) {
    commandLine 'git', 'stash', 'push', '--', 'src/main/java'
    commandLine 'git', 'checkout', 'HEAD~1', '--', 'src/main/java'
    task('buildJar1', type: Jar) {
        dependsOn compileJava
        archiveFileName = 'app-HEAD1.jar'
        destinationDirectory = file("$dirBuild")
    }
    commandLine 'git', 'checkout', 'HEAD~2', '--', 'src/main/java'
    task('buildJar2', type: Jar) {
        dependsOn compileJava
        archiveFileName = 'app-HEAD2.jar'
        destinationDirectory = file("$dirBuild")
    }
    commandLine 'git', 'checkout', 'HEAD', '--', 'src/main/java'
    commandLine 'git', 'stash', 'pop'
    doLast {
        task revisionArchive(type: Zip) {
            from("$dirBuild") {
                include 'app-HEAD1.jar', 'app-HEAD2.jar'
            }
            archiveFileName = 'revisions.zip'
            destinationDirectory = file("$dirBuild")
        }
        doLast {
            revisionArchive.execute()
        }
    }
}

task history {
    doLast {
        def success = false
        def diffResult = ""
        def outputStream
        def count = 0
        def commit = 'HEAD'
        def prevCommit = commit + '^'

        try {
            exec {
                workingDir projectDir
                commandLine 'cmd', '/c', 'gradlew', 'compileJava'
            }
            success = true
        } catch (Exception e) {
            println "Compile error: ${e.message}"
            success = false
        }
        println "Compile result: $success"

        if (!success) {
            def diffFile = file("$dirBuild/diff.txt")
            def successfullyLoaded = false
            def maxAttempts = 30

            while (!successfullyLoaded && count < maxAttempts) {
                if (count == 0) {
                    outputStream = new ByteArrayOutputStream()
                    exec {
                        commandLine 'git', 'diff'
                        workingDir projectDir
                        standardOutput = outputStream
                    }
                    diffResult = outputStream.toString()
                    count = 1
                    exec {
                        commandLine 'git', 'reset', '--hard', commit
                        workingDir projectDir
                        ignoreExitValue true
                    }
                } else {
                    exec {
                        commandLine 'git', 'diff', prevCommit, commit
                        workingDir projectDir
                        standardOutput = outputStream
                    }
                    diffResult = outputStream.toString()
                    exec {
                        commandLine 'git', 'reset', '--hard', prevCommit
                        workingDir projectDir
                        ignoreExitValue true
                    }
                }

                try {
                    exec {
                        workingDir projectDir
                        commandLine 'cmd', '/c', 'gradlew', 'compileJava'
                    }
                    success = true
                } catch (Exception e) {
                    println "Compile error: ${e.message}"
                    success = false
                }

                if (!success) {
                    println "Failed to compile project, retrying..."
                    commit = prevCommit
                    prevCommit += '^'
                    count++
                } else {
                    println "Project compiled successfully, diff in ${diffFile}"
                    successfullyLoaded = true
                    def outputFile = new File("diff.txt")
                    outputFile.write(diffResult)
                }
            }

            if (!successfullyLoaded) {
                throw new GradleException("Failed to find a working revision in the Git repository")
            }
        } else {
            println "Not necessary to load previous revision: project compiled successfully"
        }
    }
}


task changeLocalization {
    doLast {
        def RUlang = 'messages_ru.properties'
        def ENlang = 'messages_en.properties'
        def settingsFile = file('settings.gradle')
        if (settingsFile.text.contains(RUlang)) {
            settingsFile.text = settingsFile.text.replace(RUlang, ENlang)
        } else {
            settingsFile.text = settingsFile.text.replace(ENlang, RUlang)
        }
        settingsFile.write(settingsFile.text)
    }
}

